"""  # noqa: Y021
This type stub file was generated by pyright.
"""
from collections import deque
from typing import Any

import cv2
from d3dshot.capture_output import CaptureOutput
from d3dshot.display import Display
from numpy.typing import NDArray

Unknown = Any


class Singleton(type):
    _instances = ...

    def __call__(cls, *args, **kwargs):
        ...


class D3DShot(metaclass=Singleton):
    def __init__(
            self,
            capture_output=...,
            frame_buffer_size: int = ...,
            pil_is_available: bool = ...,
            numpy_is_available: bool = ...,
            pytorch_is_available: bool = ...,
            pytorch_gpu_is_available: bool = ...) -> None:
        ...

    displays: list[Display]
    display: Display
    capture_output: CaptureOutput
    frame_buffer_size: int
    frame_buffer: deque
    previous_screenshot: Unknown | None
    region: Unknown | None
    _pil_is_available: bool
    _numpy_is_available: bool
    _pytorch_is_available: bool
    _pytorch_gpu_is_available: bool
    _capture_thread: Unknown | None
    _is_capturing: bool

    @property
    def is_capturing(self) -> bool:
        ...

    def get_latest_frame(self) -> None:
        ...

    def get_frame(self, frame_index) -> None:
        ...

    def get_frames(self, frame_indices) -> list:
        ...

    def get_frame_stack(self, frame_indices, stack_dimension=...) -> NDArray:
        ...

    def screenshot(self, region: tuple[int, int, int, int] = ...) -> cv2.Mat:
        ...

    def screenshot_to_disk(self, directory=..., file_name=..., region: tuple[int, int, int, int] = ...) -> str:
        ...

    def frame_buffer_to_disk(self, directory=...) -> None:
        ...

    def capture(self, target_fps=..., region: tuple[int, int, int, int] = ...) -> bool:
        ...

    def screenshot_every(self, interval, region: tuple[int, int, int, int] = ...) -> bool:
        ...

    def screenshot_to_disk_every(self, interval, directory=..., region: tuple[int, int, int, int] = ...) -> bool:
        ...

    def stop(self) -> bool:
        ...

    def benchmark(self) -> None:
        ...

    def detect_displays(self) -> None:
        ...
